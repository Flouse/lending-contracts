/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "BandOracleProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BandOracleProvider__factory>;
    getContractFactory(
      name: "IStdReference",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStdReference__factory>;
    getContractFactory(
      name: "ERC20Test",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Test__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20Detailed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Detailed__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "AdminUpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AdminUpgradeabilityProxy__factory>;
    getContractFactory(
      name: "BaseAdminUpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseAdminUpgradeabilityProxy__factory>;
    getContractFactory(
      name: "BaseUpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseUpgradeabilityProxy__factory>;
    getContractFactory(
      name: "InitializableAdminUpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InitializableAdminUpgradeabilityProxy__factory>;
    getContractFactory(
      name: "InitializableUpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InitializableUpgradeabilityProxy__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "UpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeabilityProxy__factory>;
    getContractFactory(
      name: "ATokensAndRatesHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ATokensAndRatesHelper__factory>;
    getContractFactory(
      name: "StableAndVariableTokensHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StableAndVariableTokensHelper__factory>;
    getContractFactory(
      name: "ILendingPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILendingPool__factory>;
    getContractFactory(
      name: "ILendingPoolAddressesProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILendingPoolAddressesProvider__factory>;
    getContractFactory(
      name: "ILendingPoolAddressesProviderRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILendingPoolAddressesProviderRegistry__factory>;
    getContractFactory(
      name: "ILendingPoolCollateralManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILendingPoolCollateralManager__factory>;
    getContractFactory(
      name: "ILendingPoolConfigurator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILendingPoolConfigurator__factory>;
    getContractFactory(
      name: "ILendingRateOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILendingRateOracle__factory>;
    getContractFactory(
      name: "IReserveInterestRateStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IReserveInterestRateStrategy__factory>;
    getContractFactory(
      name: "IChainlinkAggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IChainlinkAggregator__factory>;
    getContractFactory(
      name: "IPriceOracleGetter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceOracleGetter__factory>;
    getContractFactory(
      name: "IAaveIncentivesController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAaveIncentivesController__factory>;
    getContractFactory(
      name: "IAToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAToken__factory>;
    getContractFactory(
      name: "ICreditDelegationToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICreditDelegationToken__factory>;
    getContractFactory(
      name: "IDelegationToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDelegationToken__factory>;
    getContractFactory(
      name: "IInitializableAToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInitializableAToken__factory>;
    getContractFactory(
      name: "IInitializableDebtToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInitializableDebtToken__factory>;
    getContractFactory(
      name: "IScaledBalanceToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IScaledBalanceToken__factory>;
    getContractFactory(
      name: "IStableDebtToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStableDebtToken__factory>;
    getContractFactory(
      name: "IVariableDebtToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVariableDebtToken__factory>;
    getContractFactory(
      name: "AaveProtocolDataProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveProtocolDataProvider__factory>;
    getContractFactory(
      name: "LendingRateOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LendingRateOracle__factory>;
    getContractFactory(
      name: "BandOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BandOracle__factory>;
    getContractFactory(
      name: "DefaultReserveInterestRateStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DefaultReserveInterestRateStrategy__factory>;
    getContractFactory(
      name: "LendingPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LendingPool__factory>;
    getContractFactory(
      name: "LendingPoolAddressesProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LendingPoolAddressesProvider__factory>;
    getContractFactory(
      name: "LendingPoolAddressesProviderRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LendingPoolAddressesProviderRegistry__factory>;
    getContractFactory(
      name: "LendingPoolCollateralManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LendingPoolCollateralManager__factory>;
    getContractFactory(
      name: "LendingPoolConfigurator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LendingPoolConfigurator__factory>;
    getContractFactory(
      name: "BaseImmutableAdminUpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseImmutableAdminUpgradeabilityProxy__factory>;
    getContractFactory(
      name: "InitializableImmutableAdminUpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InitializableImmutableAdminUpgradeabilityProxy__factory>;
    getContractFactory(
      name: "Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Errors__factory>;
    getContractFactory(
      name: "GenericLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GenericLogic__factory>;
    getContractFactory(
      name: "ReserveLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReserveLogic__factory>;
    getContractFactory(
      name: "ValidationLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ValidationLogic__factory>;
    getContractFactory(
      name: "AToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AToken__factory>;
    getContractFactory(
      name: "DebtTokenBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DebtTokenBase__factory>;
    getContractFactory(
      name: "DelegationAwareAToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DelegationAwareAToken__factory>;
    getContractFactory(
      name: "IncentivizedERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IncentivizedERC20__factory>;
    getContractFactory(
      name: "StableDebtToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StableDebtToken__factory>;
    getContractFactory(
      name: "VariableDebtToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VariableDebtToken__factory>;

    getContractAt(
      name: "BandOracleProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BandOracleProvider>;
    getContractAt(
      name: "IStdReference",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStdReference>;
    getContractAt(
      name: "ERC20Test",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Test>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20Detailed",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Detailed>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "AdminUpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AdminUpgradeabilityProxy>;
    getContractAt(
      name: "BaseAdminUpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseAdminUpgradeabilityProxy>;
    getContractAt(
      name: "BaseUpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseUpgradeabilityProxy>;
    getContractAt(
      name: "InitializableAdminUpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InitializableAdminUpgradeabilityProxy>;
    getContractAt(
      name: "InitializableUpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InitializableUpgradeabilityProxy>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "UpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeabilityProxy>;
    getContractAt(
      name: "ATokensAndRatesHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ATokensAndRatesHelper>;
    getContractAt(
      name: "StableAndVariableTokensHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StableAndVariableTokensHelper>;
    getContractAt(
      name: "ILendingPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILendingPool>;
    getContractAt(
      name: "ILendingPoolAddressesProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILendingPoolAddressesProvider>;
    getContractAt(
      name: "ILendingPoolAddressesProviderRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILendingPoolAddressesProviderRegistry>;
    getContractAt(
      name: "ILendingPoolCollateralManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILendingPoolCollateralManager>;
    getContractAt(
      name: "ILendingPoolConfigurator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILendingPoolConfigurator>;
    getContractAt(
      name: "ILendingRateOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILendingRateOracle>;
    getContractAt(
      name: "IReserveInterestRateStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IReserveInterestRateStrategy>;
    getContractAt(
      name: "IChainlinkAggregator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IChainlinkAggregator>;
    getContractAt(
      name: "IPriceOracleGetter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceOracleGetter>;
    getContractAt(
      name: "IAaveIncentivesController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAaveIncentivesController>;
    getContractAt(
      name: "IAToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAToken>;
    getContractAt(
      name: "ICreditDelegationToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICreditDelegationToken>;
    getContractAt(
      name: "IDelegationToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDelegationToken>;
    getContractAt(
      name: "IInitializableAToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInitializableAToken>;
    getContractAt(
      name: "IInitializableDebtToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInitializableDebtToken>;
    getContractAt(
      name: "IScaledBalanceToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IScaledBalanceToken>;
    getContractAt(
      name: "IStableDebtToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStableDebtToken>;
    getContractAt(
      name: "IVariableDebtToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVariableDebtToken>;
    getContractAt(
      name: "AaveProtocolDataProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveProtocolDataProvider>;
    getContractAt(
      name: "LendingRateOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LendingRateOracle>;
    getContractAt(
      name: "BandOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BandOracle>;
    getContractAt(
      name: "DefaultReserveInterestRateStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DefaultReserveInterestRateStrategy>;
    getContractAt(
      name: "LendingPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LendingPool>;
    getContractAt(
      name: "LendingPoolAddressesProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LendingPoolAddressesProvider>;
    getContractAt(
      name: "LendingPoolAddressesProviderRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LendingPoolAddressesProviderRegistry>;
    getContractAt(
      name: "LendingPoolCollateralManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LendingPoolCollateralManager>;
    getContractAt(
      name: "LendingPoolConfigurator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LendingPoolConfigurator>;
    getContractAt(
      name: "BaseImmutableAdminUpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseImmutableAdminUpgradeabilityProxy>;
    getContractAt(
      name: "InitializableImmutableAdminUpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InitializableImmutableAdminUpgradeabilityProxy>;
    getContractAt(
      name: "Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Errors>;
    getContractAt(
      name: "GenericLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GenericLogic>;
    getContractAt(
      name: "ReserveLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReserveLogic>;
    getContractAt(
      name: "ValidationLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ValidationLogic>;
    getContractAt(
      name: "AToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AToken>;
    getContractAt(
      name: "DebtTokenBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DebtTokenBase>;
    getContractAt(
      name: "DelegationAwareAToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DelegationAwareAToken>;
    getContractAt(
      name: "IncentivizedERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IncentivizedERC20>;
    getContractAt(
      name: "StableDebtToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StableDebtToken>;
    getContractAt(
      name: "VariableDebtToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VariableDebtToken>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
